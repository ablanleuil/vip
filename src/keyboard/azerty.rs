use super::{ModSet, CHARS_IN_ORDER, KeyboardLayout};
use glfw::Key;

const AZERTY_CHARCODES : & 'static [(Key, ModSet)] = 
&[ (Key::Escape, ModSet::empty())
,(Key::F1, ModSet::empty())
,(Key::F2, ModSet::empty())
,(Key::F3, ModSet::empty())
,(Key::F4, ModSet::empty())
,(Key::F5, ModSet::empty())
,(Key::F6, ModSet::empty())
,(Key::F7, ModSet::empty())
,(Key::F8, ModSet::empty())
,(Key::F9, ModSet::empty())
,(Key::F10, ModSet::empty())
,(Key::F11, ModSet::empty())
,(Key::F12, ModSet::empty())
,(Key::Insert, ModSet::empty())
,(Key::Delete, ModSet::empty())
,(Key::Backspace, ModSet::empty())
,(Key::Home, ModSet::empty())
,(Key::End, ModSet::empty())
,(Key::PageUp, ModSet::empty())
,(Key::PageDown, ModSet::empty())
,(Key::Left, ModSet::empty())
,(Key::Down, ModSet::empty())
,(Key::Up, ModSet::empty())
,(Key::Right, ModSet::empty())
,(Key::Enter, ModSet::empty())
,(Key::Space, ModSet::empty())
,(Key::GraveAccent, ModSet::empty())
,(Key::Num1, ModSet::shift())
,(Key::Num2, ModSet::shift())
,(Key::Num3, ModSet::shift())
,(Key::Num4, ModSet::shift())
,(Key::Num5, ModSet::shift())
,(Key::Num6, ModSet::shift())
,(Key::Num7, ModSet::shift())
,(Key::Num8, ModSet::shift())
,(Key::Num9, ModSet::shift())
,(Key::Num0, ModSet::shift())
,(Key::Minus, ModSet::shift())
,(Key::Equal, ModSet::shift())
,(Key::Num1,  ModSet::empty())
,(Key::Num2,  ModSet::empty())
,(Key::Num3,  ModSet::empty())
,(Key::Num4,  ModSet::empty())
,(Key::Num5,  ModSet::empty())
,(Key::Num6,  ModSet::empty())
,(Key::Num7,  ModSet::empty())
,(Key::Num8,  ModSet::empty())
,(Key::Num9,  ModSet::empty())
,(Key::Num0,  ModSet::empty())
,(Key::Minus, ModSet::empty())
,(Key::Equal, ModSet::empty())
,(Key::Num1,  ModSet::altgr())
,(Key::Num2,  ModSet::altgr())
,(Key::Num3,  ModSet::altgr())
,(Key::Num4,  ModSet::altgr())
,(Key::Num5,  ModSet::altgr())
,(Key::Num6,  ModSet::altgr())
,(Key::Num7,  ModSet::altgr())
,(Key::Num8,  ModSet::altgr())
,(Key::Num9,  ModSet::altgr())
,(Key::Num0,  ModSet::altgr())
,(Key::Minus, ModSet::altgr())
,(Key::Equal, ModSet::altgr())
,(Key::Q, ModSet::empty())
,(Key::W, ModSet::empty())
,(Key::E, ModSet::empty())
,(Key::R, ModSet::empty())
,(Key::T, ModSet::empty())
,(Key::Y, ModSet::empty())
,(Key::U, ModSet::empty())
,(Key::I, ModSet::empty())
,(Key::O, ModSet::empty())
,(Key::P, ModSet::empty())
,(Key::LeftBracket, ModSet::empty())
,(Key::RightBracket, ModSet::empty())
,(Key::A, ModSet::empty())
,(Key::S, ModSet::empty())
,(Key::D, ModSet::empty())
,(Key::F, ModSet::empty())
,(Key::G, ModSet::empty())
,(Key::H, ModSet::empty())
,(Key::J, ModSet::empty())
,(Key::K, ModSet::empty())
,(Key::L, ModSet::empty())
,(Key::Semicolon, ModSet::empty())
,(Key::Apostrophe, ModSet::empty())
,(Key::Backslash, ModSet::empty())
,(Key::Z, ModSet::empty())
,(Key::X, ModSet::empty())
,(Key::C, ModSet::empty())
,(Key::V, ModSet::empty())
,(Key::B, ModSet::empty())
,(Key::N, ModSet::empty())
,(Key::M, ModSet::empty())
,(Key::Comma, ModSet::empty())
,(Key::Period, ModSet::empty())
,(Key::Slash, ModSet::empty())
,(Key::LeftBracket, ModSet::shift())
,(Key::RightBracket, ModSet::shift())
,(Key::Apostrophe, ModSet::shift())
,(Key::Backslash, ModSet::shift())
,(Key::M, ModSet::shift())
,(Key::Comma, ModSet::shift())
,(Key::Period, ModSet::shift())
,(Key::Slash, ModSet::shift())
,(Key::World1, ModSet::empty())
,(Key::World1, ModSet::shift())
,(Key::Tab, ModSet::empty())
,(Key::Kp0, ModSet::empty())
,(Key::Kp1, ModSet::empty())
,(Key::Kp2, ModSet::empty())
,(Key::Kp3, ModSet::empty())
,(Key::KpSubtract, ModSet::empty())
,(Key::Kp4, ModSet::empty())
,(Key::Kp5, ModSet::empty())
,(Key::Kp6, ModSet::empty())
,(Key::KpMultiply, ModSet::empty())
,(Key::Kp7, ModSet::empty())
,(Key::Kp8, ModSet::empty())
,(Key::Kp9, ModSet::empty())
,(Key::KpDivide, ModSet::empty())
,(Key::Q, ModSet::shift())
,(Key::W, ModSet::shift())
,(Key::E, ModSet::shift())
,(Key::R, ModSet::shift())
,(Key::T, ModSet::shift())
,(Key::Y, ModSet::shift())
,(Key::U, ModSet::shift())
,(Key::I, ModSet::shift())
,(Key::O, ModSet::shift())
,(Key::P, ModSet::shift())
,(Key::A, ModSet::shift())
,(Key::S, ModSet::shift())
,(Key::D, ModSet::shift())
,(Key::F, ModSet::shift())
,(Key::G, ModSet::shift())
,(Key::H, ModSet::shift())
,(Key::J, ModSet::shift())
,(Key::K, ModSet::shift())
,(Key::L, ModSet::shift())
,(Key::Semicolon, ModSet::shift())
,(Key::Z, ModSet::shift())
,(Key::X, ModSet::shift())
,(Key::C, ModSet::shift())
,(Key::V, ModSet::shift())
,(Key::B, ModSet::shift())
,(Key::N, ModSet::shift())
,(Key::M, ModSet::shift())

];

pub fn layout() -> KeyboardLayout {
    let map =
        CHARS_IN_ORDER
        .iter()
        .zip(AZERTY_CHARCODES.iter())
        .map(|(&s, &code)| (code, s.into()))
        .collect();

    KeyboardLayout { map }
}
